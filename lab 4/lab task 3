#include <iostream>
using namespace std;

class DynamicArray {
    private:
     int size;
     int *arr;

    public:
     DynamicArray() : size(0), arr(NULL) {}     
     DynamicArray(int s) : size(s) {
        arr = new int[size];
        for (int i = 0; i < size; i++)
        {
            arr[i] = 0;
        }
     }   
     
     DynamicArray(const DynamicArray& other) {
        size = other.size;
        arr = new int[size];
        for (int i = 0; i < size; i++)
        {
            arr[i] = other.arr[i];
        }
     }

     DynamicArray& operator=(const DynamicArray& other) {
        if (this == &other)
        {
            return *this;
        }
        if (arr != NULL) {delete[] arr;}
        size = other.size;
        arr = new int[size];
        for (int i = 0; i < size; i++)
        {
            arr[i] = other.arr[i];
        }
        return *this;
     }

     DynamicArray(DynamicArray&& other) noexcept {
        size = other.size;
        other.size = 0;
        arr = other.arr;
        other.arr = NULL;
     }

     DynamicArray& operator=(DynamicArray&& other) noexcept {
        if (this == &other) {return *this;}
        if (arr != NULL) {delete[] arr;};
        size = other.size;
        other.size = 0;
        arr = other.arr;
        other.arr = NULL;
        return *this;
     }
     
     int Size() const {
        return size;
     }

     int& at(int i) {
        if (i < 0 || i >= size) {
            throw out_of_range("Out of bounds.\n");
        }
        return arr[i];
     }

     bool resize(int n) {
        if (n < 0) {return false;}
        int *arr2 = new int[n];
        for (int i = 0; i < n; i++)
        {
           if (i >= size) {arr2[i] = 0;continue;} 
           arr2[i] = arr[i];   
        }
        delete[] arr;
        arr = arr2;
        size = n;
        return true;
        
     }

     ~DynamicArray() {
        delete[] arr;
     }
};

int main() {
    // Testing parameterized constructor
    DynamicArray arr1(5);
    for (int i = 0; i < arr1.Size(); i++) {
        arr1.at(i) = i + 1; // Assign values: 1, 2, 3, 4, 5
    }

    cout << "arr1: ";
    for (int i = 0; i < arr1.Size(); i++) {
        cout << arr1.at(i) << " ";
    }
    cout << endl;

    // Testing copy constructor
    DynamicArray arr2 = arr1;
    cout << "arr2 (copy of arr1): ";
    for (int i = 0; i < arr2.Size(); i++) {
        cout << arr2.at(i) << " ";
    }
    cout << endl;

    // Testing move constructor
    DynamicArray arr3 = move(arr1);
    cout << "arr3 (moved from arr1): ";
    for (int i = 0; i < arr3.Size(); i++) {
        cout << arr3.at(i) << " ";
    }
    cout << endl;

    // arr1 should be empty now
    cout << "arr1 size after move: " << arr1.Size() << endl;

    // Testing resize
    arr3.resize(8); // Increasing size
    cout << "arr3 after resize(8): ";
    for (int i = 0; i < arr3.Size(); i++) {
        cout << arr3.at(i) << " "; // Should print original values + 0s
    }
    cout << endl;

    arr3.resize(3); // Decreasing size
    cout << "arr3 after resize(3): ";
    for (int i = 0; i < arr3.Size(); i++) {
        cout << arr3.at(i) << " "; // Should print first 3 elements
    }
    cout << endl;

    // Testing copy assignment
    DynamicArray arr4(3);
    arr4 = arr3;
    cout << "arr4 (after copy assignment from arr3): ";
    for (int i = 0; i < arr4.Size(); i++) {
        cout << arr4.at(i) << " ";
    }
    cout << endl;

    // Testing move assignment
    DynamicArray arr5(3);
    arr5 = move(arr4);
    cout << "arr5 (after move assignment from arr4): ";
    for (int i = 0; i < arr5.Size(); i++) {
        cout << arr5.at(i) << " ";
    }
    cout << endl;

    cout << "arr4 size after move: " << arr4.Size() << endl; // Should be 0

    return 0;
}
