#include <iostream>
using namespace std;

class Matrix
{
    int rows, cols;
    int **arr;

public:
    // Default constructor
    Matrix() : rows(0), cols(0), arr(NULL) {}

    // parameterized constructor
    Matrix(int r, int c) : rows(r), cols(c)
    {
        arr = new int *[rows];
        for (int i = 0; i < rows; i++)
        {
            arr[i] = new int[cols];
            for (int j = 0; j < cols; j++)
            {
                arr[i][j] = 0;
            }
        }
    }

    // copy constructor
    Matrix(const Matrix &other)
    {
        rows = other.rows;
        cols = other.cols;
        arr = new int *[rows];
        for (int i = 0; i < rows; i++)
        {
            arr[i] = new int[cols];
            for (int j = 0; j < cols; j++)
            {
                arr[i][j] = other.arr[i][j];
            }
        }
    }

    // move constructor
    Matrix(Matrix &&other) noexcept
    {
        rows = other.rows;
        other.rows = 0;
        cols = other.cols;
        other.cols = 0;
        arr = other.arr;
        other.arr = NULL;
    }

    // copy assignment operator
    Matrix &operator=(const Matrix &other)
    {
        if (this == &other)
        {
            return *this;
        }
        if (arr != NULL)
        {
            for (int i = 0; i < rows; i++)
            {
                delete[] arr[i];
            }
            delete[] arr;
        }

        cols = other.cols;
        rows = other.rows;
        arr = new int *[rows];
        for (int i = 0; i < rows; i++)
        {
            arr[i] = new int[cols];
            for (int j = 0; j < cols; j++)
            {
                arr[i][j] = other.arr[i][j];
            }
        }
        return *this;
    }

    // move assignment operator
    Matrix &operator=(Matrix &&other) noexcept
    {
        if (this == &other)
        {
            return *this;
        }
        if (arr != NULL)
        {
            for (int i = 0; i < rows; i++)
            {
                delete[] arr[i];
            }
            delete[] arr;
        }

        rows = other.rows;
        other.rows = 0;
        cols = other.cols;
        other.cols = 0;
        arr = other.arr;
        other.arr = NULL;
        return *this;
    }

    // destructor
    ~Matrix()
    {
        if (arr != NULL)
        {
            for (int i = 0; i < rows; i++)
            {
                delete[] arr[i];
            }
            delete[] arr;
        }
    }

    void setValues(int x)
    {
        for (int i = 0; i < rows; i++)
        {
            // arr[i] = new int[cols];
            for (int j = 0; j < cols; j++)
            {
                arr[i][j] = x * i * j;
            }
        }
    }

    void display()
    {
        for (int i = 0; i < rows; i++)
        {
            // arr[i] = new int[cols];
            for (int j = 0; j < cols; j++)
            {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
    }

    Matrix transpose() {
        Matrix obj(cols, rows);
        // obj.arr = new int*[cols];
        for (int i = 0; i < cols; i++)
        {
            // obj.arr[i] = new int[rows];
            for (int j = 0; j < rows; j++)
            {
               obj.arr[i][j] = arr[j][i]; 
            }
            
        }
        return obj;
    }
};

int main(int argc, char *argv[])
{
    Matrix m1(2, 3);
    m1.setValues(2);
    Matrix m2, m3(3, 4);
    m2 = m1;
    m1.display();
    cout << endl;
    m2.display();
    cout << endl;
    m3.setValues(4);
    m2 = m1.transpose();
    m2.display();
    cout << "m3\n";
    m3.display();
    cout << endl;
}
