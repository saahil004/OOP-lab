#include <iostream>
#include <string>

using namespace std;

enum Type {
    FOOD = 0,
    DRINK = 1
};

struct MenuItem {
    string name;
    Type type;
    double price;
};

class CoffeeShop {
    string name;
    MenuItem *Menu;
    int noOfItems;
    MenuItem *Orders;
    int noOfOrders;
    int maxOrders;

public:
    CoffeeShop(string n, int ni, int mo) 
        : name(n), noOfItems(ni), noOfOrders(0), maxOrders(mo) {
        Menu = new MenuItem[noOfItems];
        Orders = new MenuItem[maxOrders];

        for (int i = 0; i < noOfItems; i++) {
            cout << "Enter item " << i + 1 << " name: ";
            cin >> ws;  
            getline(cin, Menu[i].name);

            int typeInput;
            cout << "Enter item type (0 for FOOD, 1 for DRINK): ";
            cin >> typeInput;
            while (typeInput != 0 && typeInput != 1) {
                cout << "Invalid input! Enter 0 for FOOD, 1 for DRINK: ";
                cin >> typeInput;
            }
            Menu[i].type = static_cast<Type>(typeInput);

            cout << "Enter item " << i + 1 << " price: ";
            cin >> Menu[i].price;
        }
    }

    ~CoffeeShop() {
        delete[] Menu;
        delete[] Orders;
    }

    void addOrder() {
        if (noOfOrders == maxOrders) {
            cout << "Max number of orders reached.\n";
            return;
        }
        
        string itemName;
        cout << "Enter item name to order: ";
        cin >> ws;
        getline(cin, itemName);

        for (int i = 0; i < noOfItems; i++) {
            if (Menu[i].name == itemName) {
                Orders[noOfOrders] = Menu[i];
                noOfOrders++;
                cout << "Order added: " << itemName << endl;
                return;
            }
        }

        cout << "Item not available.\n";
    }

    void fulfillOrder() {
        if (noOfOrders == 0) {
            cout << "No orders currently.\n";
            return;
        }
        cout << "Order fulfilled: " << Orders[0].name << "\n";

        for (int i = 1; i < noOfOrders; i++) {
            Orders[i - 1] = Orders[i];
        }
        noOfOrders--;
    }

    void listOrders() {
        if (noOfOrders == 0) {
            cout << "No pending orders.\n";
            return;
        }
        cout << "Current Orders:\n";
        for (int i = 0; i < noOfOrders; i++) {
            cout << Orders[i].name << " - $" << Orders[i].price << "\n";
        }
    }

    void dueAmount() {
        double total = 0;
        for (int i = 0; i < noOfOrders; i++) {
            total += Orders[i].price;
        }
        cout << "Total due amount: $" << total << "\n";
    }

    void showDrinksOnly() {
        cout << "Drinks available:\n";
        for (int i = 0; i < noOfItems; i++) {
            if (Menu[i].type == DRINK) {
                cout << Menu[i].name << " - $" << Menu[i].price << "\n";
            }
        }
    }

    void cheapestItem() {
        if (noOfItems == 0) {
            cout << "No items in the menu.\n";
            return;
        }

        int minIndex = 0;
        for (int i = 1; i < noOfItems; i++) {
            if (Menu[i].price < Menu[minIndex].price) {
                minIndex = i;
            }
        }

        cout << "Cheapest item: " << Menu[minIndex].name << " - $" << Menu[minIndex].price << "\n";
    }
};

int main() {
    int numItems, maxOrders;
    
    cout << "Enter number of menu items: ";
    cin >> numItems;
    
    cout << "Enter maximum number of orders: ";
    cin >> maxOrders;

    CoffeeShop shop("My Coffee Shop", numItems, maxOrders);

    int choice;
    do {
        cout << "\n1. Add Order\n2. Fulfill Order\n3. List Orders\n4. Show Drinks\n5. Show Cheapest Item\n6. Due Amount\n0. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                shop.addOrder();
                break;
            case 2:
                shop.fulfillOrder();
                break;
            case 3:
                shop.listOrders();
                break;
            case 4:
                shop.showDrinksOnly();
                break;
            case 5:
                shop.cheapestItem();
                break;
            case 6:
                shop.dueAmount();
                break;
            case 0:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice, try again.\n";
        }
    } while (choice != 0);

    return 0;
}
