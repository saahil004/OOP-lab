#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Logger {
private:
    vector<string> logs;
    const size_t MAX_LOGS = 1000;

    void addLog(const string& severity, const string& source, const string& message) {
        string logEntry = "[" + severity + "] (" + source + ") " + message;
        if (logs.size() >= MAX_LOGS) {
            logs.erase(logs.begin());
        }
        logs.push_back(logEntry);
    }

public:
    void logInfo(const string& source, const string& message) {
        addLog("INFO", source, message);
    }

    void logWarning(const string& source, const string& message) {
        addLog("WARNING", source, message);
    }

    void logError(const string& source, const string& message) {
        addLog("ERROR", source, message);
    }

    friend class Auditor;
};

class Auditor {
private:
    string password;

    bool authenticate(const string& inputPassword) const {
        return inputPassword == password;
    }

public:
    Auditor(const string& pass) : password(pass) {}

    vector<string> retrieveLogs(const Logger& logger, const string& inputPassword) const {
        if (!authenticate(inputPassword)) {
            cout << "Authentication failed. Logs not accessible.\n";
            return {};
        }
        return logger.logs;
    }
};

int main() {
    Logger logger;

    logger.logInfo("Network Module", "Connected to server.");
    logger.logWarning("Database Module", "Slow query detected.");
    logger.logError("UI Module", "Button click crash.");

    Auditor auditor("admin123");

    string userInput;
    cout << "\nEnter auditor password to retrieve logs: ";
    cin >> userInput;

    vector<string> logs = auditor.retrieveLogs(logger, userInput);

    if (!logs.empty()) {
        cout << "\n--- Retrieved Logs ---\n";
        for (const string& log : logs) {
            cout << log << endl;
        }
    }

    return 0;
}
