#include <iostream>
using namespace std;

int gcd(int a, int b) {
    (a < 0) ? a *= -1 : a *= 1;
    (b < 0) ? b *= -1 : b *= 1;
    int r;
    while (b > 0) {
        r = a % b;
        a = b;
        b = r;
    } 
    return a;
}

class Fraction {
   private:    
    int numerator;
    unsigned int denominator;
    
   public:
    Fraction(int n, int d) {
        bool neg = false;
        if (d < 0) { d *= -1; neg = true; } else { d *= 1; }
        if (n > d) {
            int oldn = n;
            n = n / gcd(n, d);
            d = d / gcd(oldn, d);
        } else {
            int oldn = n;
            n = n / gcd(d, n);
            d = d / gcd(d, oldn);
        }
         numerator = (neg) ? n *-1 : n;
         denominator = d;
    }
    
    Fraction operator+(const Fraction& other) {
        int N, D;
        N = numerator * other.denominator + other.numerator * denominator;
        D = denominator * other.denominator;
        return Fraction(N, D);
    }
    
    Fraction operator-(const Fraction& other) {
        int N, D;
        N = numerator * other.denominator - other.numerator * denominator;
        D = denominator * other.denominator;
        return Fraction(N, D);
    }
    
    Fraction operator*(const Fraction& other) {
        return Fraction(numerator * other.numerator, denominator * other.denominator);
    }
    
    friend ostream& operator<<(ostream& out, const Fraction& f);
};

ostream& operator<<(ostream& out, const Fraction& f) {
    out << f.numerator << "/" << f.denominator;
    return out;
}




int main() {
    Fraction f1(-1,2);
    Fraction f2(-3,1);
    Fraction f3 = f2 - f1;
    cout << f1 << endl;
    cout << f2 << endl;
    cout << f3;
    return 0;
}
