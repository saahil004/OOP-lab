#include <iostream>
#include <string>
#include <vector>
using namespace std;

class Employee {
protected:
    string name, ID;
public:
    Employee(string n, string id) : name(n), ID(id) {}
    virtual ~Employee() {}
    virtual void displayRole() = 0;
};

class IOrderTaker {
public:
    virtual void takeOrder() = 0;
};

class IOrderPreparer {
public:
    virtual void prepareOrder() = 0;
};

class IBiller {
public:
    virtual void generateBill() = 0;
};

class Waiter : public Employee, public IOrderTaker {
public:
    Waiter(string n, string id) : Employee(n, id) {}
    void takeOrder() override {
        cout << name << " is taking an order.\n";
    }
    void displayRole() override {
        cout << name << " is a Waiter.\n";
    }
};

class Chef : public Employee, public IOrderPreparer {
public:
    Chef(string n, string id) : Employee(n, id) {}
    void prepareOrder() override {
        cout << name << " is preparing an order.\n";
    }
    void displayRole() override {
        cout << name << " is a Chef.\n";
    }
};

class Cashier : public Employee, public IBiller {
public:
    Cashier(string n, string id) : Employee(n, id) {}
    void generateBill() override {
        cout << name << " is generating a bill.\n";
    }
    void displayRole() override {
        cout << name << " is a Cashier.\n";
    }
};

class Manager : public Employee, public IOrderTaker, public IBiller {
public:
    Manager(string n, string id) : Employee(n, id) {}
    void takeOrder() override {
        cout << name << " is taking an order as a Manager.\n";
    }
    void generateBill() override {
        cout << name << " is generating a bill as a Manager.\n";
    }
    void displayRole() override {
        cout << name << " is a Manager.\n";
    }
};

class Menu {
protected:
    vector<pair<string, double>> items;
public:
    virtual void addItem(string name, double price) {
        items.push_back({name, price});
    }
    virtual double calculateTotal() = 0;
};

class FoodMenu : public Menu {
public:
    double calculateTotal() override {
        double total = 0;
        for (auto& item : items) {
            total += item.second;
        }
        return total;
    }
};

class BeverageMenu : public Menu {
public:
    double calculateTotal() override {
        double total = 0;
        for (auto& item : items) {
            total += item.second * 1.1;
        }
        return total;
    }
};

int main() {
    vector<Employee*> employees;
    employees.push_back(new Waiter("John", "W001"));
    employees.push_back(new Chef("Alice", "C001"));
    employees.push_back(new Cashier("Bob", "CS001"));
    employees.push_back(new Manager("Eve", "M001"));
    
    for (auto emp : employees) {
        emp->displayRole();
        if (auto* waiter = dynamic_cast<IOrderTaker*>(emp)) {
            waiter->takeOrder();
        }
        if (auto* chef = dynamic_cast<IOrderPreparer*>(emp)) {
            chef->prepareOrder();
        }
        if (auto* cashier = dynamic_cast<IBiller*>(emp)) {
            cashier->generateBill();
        }
        cout << "-------------------\n";
    }
    
    FoodMenu foodMenu;
    foodMenu.addItem("Burger", 5.99);
    foodMenu.addItem("Pasta", 7.49);
    cout << "Total Food Menu Cost: $" << foodMenu.calculateTotal() << "\n";
    
    BeverageMenu beverageMenu;
    beverageMenu.addItem("Soda", 1.99);
    beverageMenu.addItem("Coffee", 2.49);
    cout << "Total Beverage Menu Cost: $" << beverageMenu.calculateTotal() << "\n";
    
    for (auto emp : employees) {
        delete emp;
    }
    return 0;
}
