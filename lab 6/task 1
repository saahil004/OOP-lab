#include <iostream>
#include <string>
#include <vector>
using namespace std;

class BankAccount
{
protected:
    string accountNumber;
    double balance;
    double limit;
    bool active = true;

public:
    virtual void display() {}
    virtual bool deposit(double a) {}
    virtual bool withdraw(double a) {}
    void activate() { active = true; }
    void deactivate() { active = false; }
    string getAccNum() { return accountNumber; }
    bool isActive() { return active; }
    bool setLimit(double lim)
    {
        if (lim > 0)
        {
            limit = lim;
            return true;
        }
        return false;
    }
};

class SavingsAccount : public BankAccount
{
private:
    double monthlyInterest;

public:
    SavingsAccount(string an, double bal, double lim, double m) : monthlyInterest(m)
    {
        limit = lim;
        balance = bal;
        accountNumber = an;
    }

    void display() override
    {
        cout << "Account number: " << accountNumber << "\nBalance: " << balance << "\nMonthly Interest: " << monthlyInterest << endl;
    }

    bool withdraw(double a) override
    {
        if (a <= balance)
        {
            balance -= a;
            return true;
        }
        return false;
    }

    bool deposit(double a) override
    {
        if (a >= 0 && balance + a <= limit)
        {
            balance += a;
            return true;
        }
        return false;
    }

    double getMonthlyInterest() { return monthlyInterest; }
    void setMonthlyInterest(double m) { monthlyInterest = m; }

    void applyMonthlyInterest()
    {
        balance += balance * (monthlyInterest / 100);
    }
};

class CheckingAccount : public BankAccount
{
private:
    double overdraftLimit;

public:
    CheckingAccount(string an, double bal, double lim, double odl) : overdraftLimit(odl)
    {
        limit = lim;
        accountNumber = an;
        balance = bal;
    }

    void display() override
    {
        cout << "Account number: " << accountNumber << "\nBalance: " << balance << "\nOverdraft Limit: " << overdraftLimit << endl;
    }

    bool withdraw(double a) override
    {
        if (a <= balance + overdraftLimit)
        {
            balance -= a;
            return true;
        }
        return false;
    }

    bool deposit(double a) override
    {
        if (a >= 0 && balance + a <= limit)
        {
            balance += a;
            return true;
        }
        return false;
    }
};

class BusinessAccount : public BankAccount
{
public:
    BusinessAccount(string an, double bal, double lim)
    {
        limit = lim;
        accountNumber = an;
        balance = bal;
    }

    void display() override
    {
        cout << "Account number: " << accountNumber << "\nBalance: " << balance << endl;
    }

    bool withdraw(double a) override
    {
        if (a <= balance)
        {
            balance -= a;
            return true;
        }
        return false;
    }

    bool deposit(double a) override
    {
        if (a >= 0 && balance + a <= limit)
        {
            balance += a - (a * 0.1); // corporate tax 10%
            return true;
        }
        return false;
    }
};

class User
{
protected:
    string name;
    string userID;

public:
    User(string n, string id) : name(n), userID(id) {}
    virtual bool performAction(BankAccount *account) = 0;
};

class Customer : public User
{
    // BankAccount* account;
    // string type;
    // bool active;

public:
    Customer(string n, string id) : User(n, id) {}

    bool performAction(BankAccount *account) override
    {
        if (!account->isActive() || account->getAccNum() != userID) // account number must be equal to ID
        {
            cout << "Cant perform action.\n";
            return false;
        }

        int choice;
        double amount;
        cout << "1. Deposit\n2. Withdraw\nChoose action: ";
        cin >> choice;
        if (choice == 1)
        {
            cout << "Enter deposit amount: ";
            cin >> amount;
            (account->deposit(amount)) ? cout << "Deposit successful.\n" : cout << "Deposit unsuccessful.\n";
        }
        else if (choice == 2)
        {
            cout << "Enter withdrawal amount: ";
            cin >> amount;
            (account->withdraw(amount)) ? cout << "Withdrawal successful.\n" : cout << "Withdrawal unsuccessful.\n";
        }
        return true;
    }
};

class Teller : public User
{
public:
    Teller(string n, string id) : User(n, id) {}
    bool performAction(BankAccount *account) override
    {

        int choice;
        double amount;
        cout << "1. Deposit\n2. Withdraw\n3. Freeze\nChoose action: ";
        cin >> choice;
        if (choice == 1)
        {
            cout << "Enter deposit amount: ";
            cin >> amount;
            (account->deposit(amount)) ? cout << "Deposit successful.\n" : cout << "Deposit unsuccessful.\n";
        }
        else if (choice == 2)
        {
            cout << "Enter withdrawal amount: ";
            cin >> amount;
            (account->withdraw(amount)) ? cout << "Withdrawal successful.\n" : cout << "Withdrawal unsuccessful.\n";
        }
        else if (choice == 3)
        {
            account->deactivate();
            cout << "Frozen account number: " << account->getAccNum() << endl;
        }
        return true;
    }
};
class Manager : public User
{
public:
    Manager(string n, string id) : User(n, id) {}
    bool performAction(BankAccount *account) override
    {

        int choice;
        double amount;
        cout << "1. Deposit\n2. Withdraw\n3. Freeze\n4. Change Limit\nChoose action: ";
        cin >> choice;
        if (choice == 1)
        {
            cout << "Enter deposit amount: ";
            cin >> amount;
            (account->deposit(amount)) ? cout << "Deposit successful.\n" : cout << "Deposit unsuccessful.\n";
        }
        else if (choice == 2)
        {
            cout << "Enter withdrawal amount: ";
            cin >> amount;
            (account->withdraw(amount)) ? cout << "Withdrawal successful.\n" : cout << "Withdrawal unsuccessful.\n";
        }
        else if (choice == 3)
        {
            account->deactivate();
            cout << "Frozen account number: " << account->getAccNum() << endl;
        }
        else if (choice == 4)
        {
            double lim;
            cout << "Enter limit: ";
            cin >> lim;
            (account->setLimit(lim)) ? cout << "Limit updated." << endl : cout << "Limit not updated." << endl;
        }
        return true;
    }
};

int main()
{

    //3 accounts
    BankAccount* b1 = new SavingsAccount("1", 10000, 20000, 3);
    BankAccount* b2 = new CheckingAccount("2", 10000, 20000, 3000);
    BankAccount* b3 = new BusinessAccount("3", 20000, 30000);
    
    //3 different users
    Customer c1("Saahil", "1");
    Customer c2("Afraaz", "2");
    Customer c3("Ayaan", "3");

    //can access their own accounts
    cout << "Customer 1: \n";
    c1.performAction(b1);
    b1->display();
    cout << endl;
    cout << "Customer 2 trying to access account 3: \n";
    c2.performAction(b3); //cant access
    cout << endl;
    cout << "Customer 3: \n";
    c3.performAction(b3);
    b3->display();
    cout << endl;


    cout << "Manager's work:\n";
    Manager m1("Salman", "3333");
    m1.performAction(b1);
    Teller t1("ibad", "222");
    cout << "Teller's work:\n";
    t1.performAction(b3);
    return 0;
}

