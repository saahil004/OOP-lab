#include <iostream>
#include <string>
using namespace std;

class StackUnderflowError : public exception {
    public:
      const char* what() const noexcept override {
          return "Stack underflowed.";
      }
};

template <typename T>
class Stack {
    private:
     T *arr;
     int top;
     int size;
    
    public:
     Stack(int s) : size(s), top(0) {
         arr = new T[size];
     }
     
     ~Stack() {
         delete arr;
     }
     
     bool push(T val) {
         if (top >= size) {
             return false;
         }
         arr[top] = val;
         top++;
         return true;
     }
     
     T pop() {
             if (top == 0) {
                 throw StackUnderflowError();
             }
             top--;
             return arr[top];
     }
     
     T getTop() {
             if (top == 0) {
                 throw StackUnderflowError();
             }
            //  top--;
             return arr[top - 1];
     }
};

int main() {
    Stack<int> s(3);

    s.push(10);
    s.push(20);
    s.push(30);

    try {
        cout << "Top: " << s.getTop() << endl;
        cout << "Pop: " << s.pop() << endl;
        cout << "Pop: " << s.pop() << endl;
        cout << "Pop: " << s.pop() << endl;

        // This will throw
        cout << "Pop: " << s.pop() << endl;

    } catch (const StackUnderflowError& e) {
        cerr << e.what() << endl;
    }

    return 0;
}
