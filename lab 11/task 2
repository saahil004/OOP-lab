#include <iostream>
#include <string>
#include <exception>

class InvalidOperation : public std::exception {
public:
    const char* what() const noexcept override {
        return "Invalid operation.";
    }
};

template <typename T>
class Matrix {
private:
    int rows, cols;
    T** arr;

public:
    Matrix(int r, int c) : rows(r), cols(c) {
        arr = new T*[rows];
        for (int i = 0; i < rows; i++)
            arr[i] = new T[cols]{};
    }

    Matrix(const Matrix& other) : rows(other.rows), cols(other.cols) {
        arr = new T*[rows];
        for (int i = 0; i < rows; i++) {
            arr[i] = new T[cols];
            for (int j = 0; j < cols; j++)
                arr[i][j] = other.arr[i][j];
        }
    }

    Matrix& operator=(const Matrix& other) {
        if (this != &other) {
            for (int i = 0; i < rows; i++)
                delete[] arr[i];
            delete[] arr;
            rows = other.rows;
            cols = other.cols;
            arr = new T*[rows];
            for (int i = 0; i < rows; i++) {
                arr[i] = new T[cols];
                for (int j = 0; j < cols; j++)
                    arr[i][j] = other.arr[i][j];
            }
        }
        return *this;
    }

    T& at(int r, int c) {
        if (r < 0 || r >= rows || c < 0 || c >= cols)
            throw std::out_of_range("Index out of bounds.");
        return arr[r][c];
    }

    Matrix operator+(const Matrix& other) {
        if (rows != other.rows || cols != other.cols)
            throw InvalidOperation();
        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                result.arr[i][j] = arr[i][j] + other.arr[i][j];
        return result;
    }

    ~Matrix() {
        for (int i = 0; i < rows; i++)
            delete[] arr[i];
        delete[] arr;
    }

    void print() const {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++)
                std::cout << arr[i][j] << " ";
            std::cout << "\n";
        }
    }
};

int main() {
    Matrix<int> A(2, 2), B(2, 2);
    A.at(0, 0) = 1; A.at(0, 1) = 2;
    A.at(1, 0) = 3; A.at(1, 1) = 4;
    B.at(0, 0) = 5; B.at(0, 1) = 6;
    B.at(1, 0) = 7; B.at(1, 1) = 8;

    try {
        Matrix<int> C = A + B;
        C.print();
    } catch (const InvalidOperation& e) {
        std::cout << e.what() << "\n";
    }

    return 0;
}
